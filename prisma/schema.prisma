generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Horse {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now()) @map("created_at")
  name            String         @unique
  birthday        DateTime?
  gender          TypeGender?
  profileImageUrl String?        @map("profile_image_url")
  place           String?
  images          String[]
  createAsParent  Boolean        @default(false) @map("create_as_parent")
  fatherName      String?        @map("father_name")
  motherName      String?        @map("mother_name")
  father          Horse?         @relation("Father", fields: [fatherName], references: [name])
  fatherChildren  Horse[]        @relation("Father")
  mother          Horse?         @relation("Mother", fields: [motherName], references: [name])
  motherChildren  Horse[]        @relation("Mother")
  photos          PhotosEntity[]
  news            News?
  veterinarian    Veterinarian?
  farrier         Farrier?

  @@map("horses")
}

model News {
  id        Int       @id @default(autoincrement())
  type      TypeTab   @default(news)
  tabs      NewsTab[]
  horseName String?   @unique @map("horse_name")
  horse     Horse?    @relation(fields: [horseName], references: [name])
}

model NewsTab {
  id          Int     @id @default(autoincrement())
  date        String
  title       String
  description String
  executedBy  String? @map("executed_by")
  newsId      Int?    @map("news_id")
  news        News?   @relation(fields: [newsId], references: [id], onDelete: Cascade)
}

model Veterinarian {
  id        Int      @id @default(autoincrement())
  type      TypeTab  @default(veterinarian)
  horseName String?  @unique @map("horse_name")
  tabs      VetTab[]
  horse     Horse?   @relation(fields: [horseName], references: [name])
}

model VetTab {
  id           Int           @id @default(autoincrement())
  date         String
  title        String
  description  String
  executedBy   String?       @map("executed_by")
  vetId        Int?          @map("vet_id")
  veterinarian Veterinarian? @relation(fields: [vetId], references: [id], onDelete: Cascade)
}

model Farrier {
  id        Int          @id @default(autoincrement())
  type      TypeTab      @default(farrier)
  horseName String?      @unique @map("horse_name")
  tabs      FarrierTab[]
  horse     Horse?       @relation(fields: [horseName], references: [name])
}

model FarrierTab {
  id          Int      @id @default(autoincrement())
  date        String
  title       String
  description String
  executedBy  String?  @map("executed_by")
  farrierId   Int?     @map("farrier_id")
  farrier     Farrier? @relation(fields: [farrierId], references: [id], onDelete: Cascade)
}

model PhotosEntity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  src       String
  alt       String
  horseName String   @map("horse_name")
  photos    Horse    @relation(fields: [horseName], references: [name], onDelete: Cascade)
}

enum TypeGender {
  mare
  gelding
  stallion
}

enum TypeTab {
  news
  veterinarian
  farrier
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  activated         Boolean @default(false)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  role          Role      @default(user)
  emailVerified DateTime?
  activated     Boolean?  @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  premissions   String[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  admin
  user
}
